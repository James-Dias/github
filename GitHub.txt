Github é o serviço web compartilhado para projetos que utilizam o Git para versionamento

$ git config --global user.name "Fulano da Silva"
$ git config --global user.email fulanodasilva.git@gmail.com

Para transformar o diretório atual em um repositório do Git, basta executar
o comando git init

Para que o arquivo seja rastreado, devemos executar o seguinte comando:
git add arquivo.txt

git status

cd ~/citacoes

Com a modificação rastreada, podemos gravá-la no repositório, com o
comando git commit:
git commit -m "Inserindo nova citacao"

git log

Então, execute o comando git remote, conforme o que segue:
$ git remote add origin https://github.com/fulanodasilva/
citacoes.git

enviar nossas mudanças
para o GitHub e, por consequência, para todo o mundo.
Para isso, basta executar o comando git push, da seguinte forma:
$ git push origin master

git clone https://github.com/fulanodasilva/citacoes.git

3.1 Criando um repositório local

$ git add .
O ponto do comando anterior representa todos os arquivos não rastreados
do diretório atual e também de todos os seus subdiretórios.


Quando informamos para o Git que queremos rastrear um arquivo, executando
git add pela primeira vez, o Git coloca esse arquivo em uma área
especial do repositório, chamada de stage.
Uma vez que um arquivo está na área de stage, todas as mudanças nesse
arquivo passam a ser examinadas.

Se for assim, não poderemos mais utilizar git add ., já que esse
comando rastreia todos os arquivos.
Para resolver isso, o Git tem um mecanismo que permite ignorarmos arquivos.
Basta criarmos umarquivo chamado .gitignore no diretório principal
do nosso projeto, com os nomes dos arquivos que queremos ignorar.

git log: Uma das opções mais úteis é -p, que mostra o diff introduzido em cada commit. Você pode ainda usar -2, que limita a saída somente às duas últimas entradas.
se você quiser ver algumas estatísticas abreviadas para cada commit, você pode usar a opção --stat

q sai do git log

Se quiséssemos ignorar todos os arquivos com a extensão .log, por
exemplo, colocaríamos *.log no .gitignore. Se quiséssemos ignorar
todos os arquivos .bmp do subdiretório imagens, deveríamos inserir
imagens/*.bmp.


número de verificação de integridade
de dados (checksum) criado a partir do conteúdo do arquivo
utilizando a função de hash SHA-1. Por utilizar SHA-1, é representado
por um número hexadecimal de 40 dígitos.

O termo commit é comumem qualquer sistema controlador de versão
e significa gravar novos arquivos e alterações em arquivos existentes em
um repositório. Em português, os termos comitar ou comitado são bem
corriqueiros, apesar de não existirem nos dicionários.

é possível rastrear as mudanças e comitá-las de uma vez
com a opção -a

$ git commit -a -m "Inserindo titulo e diminuindo tamanho da
pagina"

Poderíamos juntar as opções -a e
-m utilizando -am da seguinte maneira: git commit -am "Inserindo
titulo..."

Se quisermos um resumo bem conciso dos commits do nosso projeto,
podemos utilizar a opção --oneline:
$ git log --oneline

Qual a diferença entre os comandos git status e o git log?
O git status exibe arquivos que estão fora da área de stage, prontos
para serem adicionados, e arquivos que estão dentro da área de stage,
prontos para serem comitados.
Já o git log exibe o histórico das mudanças efetivamente gravadas
em um repositório. Ou seja, os commits efetuados.

O comando git diff, quando usado sem parâmetros, mostra a diferença
entre os arquivos no diretório de trabalho e a área de stage. 

É possível mostrar as diferenças entre os arquivos na área de stage e a
última versão que foi comitada utilizando a opção --staged:
$ git diff --staged

